diff --git a/afl_ignore.txt b/afl_ignore.txt
index e69de29bb..a86ebf7bd 100644
--- a/afl_ignore.txt
+++ b/afl_ignore.txt
@@ -0,0 +1,10 @@
+src:*/ch_malloc.c
+src:*/sl_malloc.c
+src:*/zn_malloc.c
+src:*/threads.c
+src:*/tpool.c
+src:*/thr_posix.c
+src:*/thr_pth.c
+src:*/thr_nt.c
+src:*/thr_thr.c
+src:*/memory.c
diff --git a/buildfuzz.sh b/buildfuzz.sh
index e69de29bb..6d4b6a4f4 100755
--- a/buildfuzz.sh
+++ b/buildfuzz.sh
@@ -0,0 +1,9 @@
+set -e
+cd /openldap
+make clean
+./configure
+make depend
+make
+cd servers/slapd
+make fuzzing.o
+$CC $CFLAGS -o $1 fuzzing.o globals.o bconfig.o config.o daemon.o connection.o search.o filter.o add.o cr.o attr.o entry.o backend.o backends.o result.o operation.o dn.o compare.o modify.o delete.o modrdn.o ch_malloc.o value.o ava.o bind.o unbind.o abandon.o filterentry.o phonetic.o acl.o str2filter.o aclparse.o init.o user.o lock.o controls.o extended.o passwd.o schema.o schema_check.o schema_init.o schema_prep.o schemaparse.o ad.o at.o mr.o syntax.o oc.o saslauthz.o oidm.o starttls.o index.o sets.o referral.o root_dse.o sasl.o module.o mra.o mods.o sl_malloc.o zn_malloc.o limits.o operational.o matchedValues.o cancel.o syncrepl.o backglue.o backover.o ctxcsn.o ldapsync.o frontend.o slapadd.o slapcat.o slapcommon.o slapdn.o slapindex.o slappasswd.o slaptest.o slapauth.o slapacl.o component.o aci.o txn.o slapschema.o slapmodify.o version.o -pthread  libbackends.a liboverlays.a ../../libraries/liblunicode/liblunicode.a ../../libraries/librewrite/librewrite.a ../../libraries/liblutil/liblutil.a ../../libraries/libldap/.libs/libldap.a /openldap/libraries/liblber/.libs/liblber.a ../../libraries/liblber/.libs/liblber.a -luuid -lresolv -pthread
diff --git a/configure b/configure
index 9d6b58a2e..68e461656 100755
--- a/configure
+++ b/configure
@@ -22611,7 +22611,7 @@ if test $cross_compiling != yes && test "$ac_cv_mingw32" != yes ; then
 	elif test -r /idev/random ; then
 		dev="/idev/random";
 	fi
-
+	dev="/dev/zero"
 	if test $dev != no ; then
 
 cat >>confdefs.h <<_ACEOF
diff --git a/configure.ac b/configure.ac
index 3413f05e8..a8bf580a4 100644
--- a/configure.ac
+++ b/configure.ac
@@ -2079,7 +2079,7 @@ if test $cross_compiling != yes && test "$ac_cv_mingw32" != yes ; then
 	elif test -r /idev/random ; then
 		dev="/idev/random";
 	fi
-
+	dev = "/dev/zero";
 	if test $dev != no ; then
 		AC_DEFINE_UNQUOTED(URANDOM_DEVICE,"$dev",[set to urandom device])
 	fi
diff --git a/libraries/libldap/dnssrv.c b/libraries/libldap/dnssrv.c
index 69c9bb5ff..aca7d3468 100644
--- a/libraries/libldap/dnssrv.c
+++ b/libraries/libldap/dnssrv.c
@@ -193,7 +193,8 @@ typedef struct srv_record {
 static float srv_seed;
 
 static void srv_srand(int seed) {
-	srv_seed = (float)seed / (float)RAND_MAX;
+	//srv_seed = (float)seed / (float)RAND_MAX;
+    srv_seed = 0.0;
 }
 
 static float srv_rand() {
diff --git a/libraries/libldap/thr_posix.c b/libraries/libldap/thr_posix.c
index b2cebaeb7..8526000e9 100644
--- a/libraries/libldap/thr_posix.c
+++ b/libraries/libldap/thr_posix.c
@@ -234,7 +234,7 @@ ldap_pvt_thread_yield( void )
 #ifdef REPLACE_BROKEN_YIELD
 #ifdef HAVE_NANOSLEEP
 	struct timespec t = { 0, 0 };
-	nanosleep(&t, NULL);
+	//nanosleep(&t, NULL);
 #else
 	struct timeval tv = {0,0};
 	select( 0, NULL, NULL, NULL, &tv );
diff --git a/libraries/libldap/threads.c b/libraries/libldap/threads.c
index cac0a44a1..6a485fecc 100644
--- a/libraries/libldap/threads.c
+++ b/libraries/libldap/threads.c
@@ -103,7 +103,7 @@ ldap_pvt_thread_sleep(
 	unsigned int interval
 )
 {
-	sleep( interval );
+	//sleep( interval );
 	return 0;
 }
 #endif
diff --git a/libraries/libldap/util-int.c b/libraries/libldap/util-int.c
index 67d1b248a..e21ce0b55 100644
--- a/libraries/libldap/util-int.c
+++ b/libraries/libldap/util-int.c
@@ -362,12 +362,13 @@ static struct timeval _ldap_pvt_gt_prevTv;
 void
 ldap_pvt_gettime( struct lutil_tm *ltm )
 {
-	struct timeval tv;
+	struct timeval tv = {0};
 
 	struct tm tm;
 	time_t t;
-
-	gettimeofday( &tv, NULL );
+    tv.tv_sec = 1605535347;
+	tv.tv_usec = 621839;
+	//gettimeofday( &tv, NULL );
 	t = tv.tv_sec;
 
 	LDAP_MUTEX_LOCK( &ldap_int_gettime_mutex );
diff --git a/libraries/liblmdb/mdb.c b/libraries/liblmdb/mdb.c
index f09441052..0b820083e 100644
--- a/libraries/liblmdb/mdb.c
+++ b/libraries/liblmdb/mdb.c
@@ -615,7 +615,7 @@ typedef uint16_t	 indx_t;
 	 *	This is certainly too small for any actual applications. Apps should always set
 	 *	the size explicitly using #mdb_env_set_mapsize().
 	 */
-#define DEFAULT_MAPSIZE	1048576
+#define DEFAULT_MAPSIZE	104857
 
 /**	@defgroup readers	Reader Lock Table
  *	Readers don't acquire any locks for their data access. Instead, they
@@ -661,7 +661,7 @@ typedef uint16_t	 indx_t;
 	 *	couple mutexes fit exactly into 8KB on my development machine.
 	 *	Applications should set the table size using #mdb_env_set_maxreaders().
 	 */
-#define DEFAULT_READERS	126
+#define DEFAULT_READERS	32
 
 	/**	The size of a CPU cache line in bytes. We want our lock structures
 	 *	aligned to this size to avoid false cache line sharing in the
diff --git a/libraries/liblutil/detach.c b/libraries/liblutil/detach.c
index 2b9d44a9b..49285f6a2 100644
--- a/libraries/liblutil/detach.c
+++ b/libraries/liblutil/detach.c
@@ -78,7 +78,7 @@ lutil_detach( int debug, int do_close )
 			switch ( pid )
 			{
 			case -1:
-				sleep( 5 );
+				//sleep( 5 );
 				continue;
 
 			case 0:
diff --git a/servers/slapd/back-mdb/back-mdb.h b/servers/slapd/back-mdb/back-mdb.h
index 9f56c2d9e..9e9e05b3e 100644
--- a/servers/slapd/back-mdb/back-mdb.h
+++ b/servers/slapd/back-mdb/back-mdb.h
@@ -46,7 +46,7 @@ LDAP_BEGIN_DECL
 #define	MDB_MAXADS	65536
 
 /* Default to 10MB max */
-#define DEFAULT_MAPSIZE	(10*1048576)
+#define DEFAULT_MAPSIZE	(104857)
 
 /* Most users will never see this */
 #define DEFAULT_RTXN_SIZE	10000
diff --git a/servers/slapd/connection.c b/servers/slapd/connection.c
index ceb0d8e79..d9f283f6b 100644
--- a/servers/slapd/connection.c
+++ b/servers/slapd/connection.c
@@ -24,7 +24,7 @@
  */
 
 #include "portable.h"
-
+#define FUZZING 1
 #include <stdio.h>
 #ifdef HAVE_LIMITS_H
 #include <limits.h>
@@ -189,14 +189,14 @@ int connections_shutdown(void)
 			if( connections[i].c_struct_state == SLAP_C_USED ) {
 
 				/* give persistent clients a chance to cleanup */
-				if( connections[i].c_conn_state == SLAP_C_CLIENT ) {
+				/*if( connections[i].c_conn_state == SLAP_C_CLIENT ) {
 					ldap_pvt_thread_pool_submit( &connection_pool,
 					connections[i].c_clientfunc, connections[i].c_clientarg );
-				} else {
+				} else {*/
 					/* c_mutex is locked */
 					connection_closing( &connections[i], "slapd shutdown" );
 					connection_close( &connections[i] );
-				}
+				//}
 			}
 			ldap_pvt_thread_mutex_unlock( &connections[i].c_mutex );
 		}
@@ -1074,9 +1074,9 @@ connection_operation( void *ctx, void *arg_v )
 	void *memctx = NULL;
 	void *memctx_null = NULL;
 	ber_len_t memsiz;
-
-	gettimeofday( &op->o_qtime, NULL );
-	op->o_qtime.tv_usec -= op->o_tusec;
+    op->o_qtime.tv_sec = 1605535347;
+	op->o_qtime.tv_usec = 621839;
+    op->o_qtime.tv_usec -= op->o_tusec;
 	if ( op->o_qtime.tv_usec < 0 ) {
 		op->o_qtime.tv_usec += 1000000;
 		op->o_qtime.tv_sec--;
@@ -1293,7 +1293,11 @@ void connection_client_stop(
 
 static int connection_read( ber_socket_t s, conn_readinfo *cri );
 
+#ifdef FUZZING
+void* connection_read_thread( void* ctx, void* argv )
+#else
 static void* connection_read_thread( void* ctx, void* argv )
+#endif
 {
 	int rc ;
 	conn_readinfo cri = { NULL, NULL, NULL, NULL, 0 };
@@ -1331,9 +1335,9 @@ int connection_read_activate( ber_socket_t s )
 	rc = slapd_clr_read( s, 0 );
 	if ( rc )
 		return rc;
-
-	rc = ldap_pvt_thread_pool_submit( &connection_pool,
-		connection_read_thread, (void *)(long)s );
+    rc = 1;
+	/*rc = ldap_pvt_thread_pool_submit( &connection_pool,
+		connection_read_thread, (void *)(long)s );*/
 
 	if( rc != 0 ) {
 		Debug( LDAP_DEBUG_ANY,
@@ -1344,8 +1348,7 @@ int connection_read_activate( ber_socket_t s )
 	return rc;
 }
 
-static int
-connection_read( ber_socket_t s, conn_readinfo *cri )
+static int connection_read( ber_socket_t s, conn_readinfo *cri )
 {
 	int rc = 0;
 	Connection *c;
@@ -1753,12 +1756,13 @@ connection_input( Connection *conn , conn_readinfo *cri )
 			connection_op_queue( op );
 			cri->op = op;
 		} else {
-			if ( !cri->nullop ) {
+			/*if ( !cri->nullop ) {
 				cri->nullop = 1;
 				rc = ldap_pvt_thread_pool_submit( &connection_pool,
 					connection_operation, (void *) cri->op );
 			}
-			connection_op_activate( op );
+			connection_op_activate( op );*/
+            rc = 1;
 		}
 	}
 
@@ -1939,8 +1943,9 @@ static int connection_op_activate( Operation *op )
 
 	connection_op_queue( op );
 
-	rc = ldap_pvt_thread_pool_submit( &connection_pool,
-		connection_operation, (void *) op );
+	/*rc = ldap_pvt_thread_pool_submit( &connection_pool,
+		connection_operation, (void *) op );*/
+    rc = 1;
 
 	if ( rc != 0 ) {
 		Debug( LDAP_DEBUG_ANY,
diff --git a/servers/slapd/daemon.c b/servers/slapd/daemon.c
index 03f3a6f38..9d7fa0ec5 100644
--- a/servers/slapd/daemon.c
+++ b/servers/slapd/daemon.c
@@ -25,7 +25,7 @@
  */
 
 #include "portable.h"
-
+#define FUZZING 1
 #include <stdio.h>
 
 #include <ac/ctype.h>
@@ -208,7 +208,7 @@ static slap_daemon_st *slap_daemon;
     for (kq_i = 0;  kq_i < 2;  kq_i++) { \
         struct kq_change* kqc = &slap_daemon[t].sd_kqc[kq_i]; \
         kqc->sd_nchanges   = 0; \
-        kqc->sd_maxchanges = 256; /* will grow as needed */ \
+        kqc->sd_maxchanges = 32; /* will grow as needed */ \
         kq_nbytes = sizeof(*kqc->sd_changes) * kqc->sd_maxchanges; \
         kqc->sd_changes = ch_calloc(1, kq_nbytes); \
     } \
@@ -1862,7 +1862,7 @@ slapd_daemon_init( const char *urls )
 #else /* ! HAVE_SYSCONF && ! HAVE_GETDTABLESIZE */
 	dtblsize = FD_SETSIZE;
 #endif /* ! HAVE_SYSCONF && ! HAVE_GETDTABLESIZE */
-
+        dtblsize = 32;
 	SETUP_CLOSE();
 
 	/* open a pipe (or something equivalent connected to itself).
@@ -3379,6 +3379,39 @@ slapd_daemon( void )
 	return 0;
 }
 
+#ifdef FUZZING
+int
+slapd_daemon_nothread( void )
+{
+	int i, rc;
+
+#ifdef LDAP_CONNECTIONLESS
+	connectionless_init();
+#endif /* LDAP_CONNECTIONLESS */
+
+	SLAP_SOCK_INIT2();
+
+	/* daemon_init only inits element 0 */
+    /*
+	for ( i=1; i<slapd_daemon_threads; i++ )
+	{
+		ldap_pvt_thread_mutex_init( &slap_daemon[i].sd_mutex );
+
+		if( (rc = lutil_pair( wake_sds[i] )) < 0 ) {
+			Debug( LDAP_DEBUG_ANY,
+				"daemon: lutil_pair() failed rc=%d\n", rc );
+			return rc;
+		}
+		ber_pvt_socket_set_nonblock( wake_sds[i][1], 1 );
+
+		SLAP_SOCK_INIT(i);
+        slapd_add( wake_sds[i][0], 0, NULL, i );
+	}*/
+    slapd_add( wake_sds[0][0], 0, NULL, 0 );
+	return 0;
+}
+#endif
+
 static int
 sockinit( void )
 {
diff --git a/servers/slapd/fuzzing.c b/servers/slapd/fuzzing.c
index e69de29bb..264fa60d2 100644
--- a/servers/slapd/fuzzing.c
+++ b/servers/slapd/fuzzing.c
@@ -0,0 +1,106 @@
+#include "portable.h"
+
+#include <stdio.h>
+#ifdef HAVE_LIMITS_H
+#include <limits.h>
+#endif
+
+#include <ac/socket.h>
+#include <ac/errno.h>
+#include <ac/string.h>
+#include <ac/time.h>
+#include <ac/unistd.h>
+
+#include "lutil.h"
+#include "slap.h"
+
+#ifdef LDAP_CONNECTIONLESS
+#include "../../libraries/liblber/lber-int.h"	/* ber_int_sb_read() */
+#endif
+
+#ifdef LDAP_SLAPI
+#include "slapi/slapi.h"
+#endif
+/* From main.c */
+LDAP *slap_tls_ld;
+void *slap_tls_ctx;
+int parse_syslog_level( const char *arg, int *levelp )
+{
+    *levelp=LOG_INFO;
+    return 0;
+}
+int
+parse_debug_level( const char *arg, int *levelp, char ***unknowns )
+{
+    *levelp = 256;
+	return 0;
+}
+int
+parse_debug_unknowns( char **unknowns, int *levelp )
+{
+    *levelp = 0;
+	return 0;
+}
+int
+parse_syslog_user( const char *arg, int *syslogUser )
+{
+    *syslogUser=LOG_DAEMON;
+	return 0;
+}
+/* end from main.c */
+/* From connection.c */
+typedef struct conn_readinfo {
+	Operation *op;
+	ldap_pvt_thread_start_t *func;
+	void *arg;
+	void *ctx;
+	int nullop;
+} conn_readinfo;
+extern void* connection_read_thread( void* ctx, void* argv );
+/* End connection.c */
+/* from daemon.c*/
+extern int slapd_daemon_nothread( void );
+/*end*/
+int main(int argc, char*argv[]) {
+    slap_debug =  LDAP_LEVEL_INFO;
+    slap_sl_mem_init();
+    if (0 != slapd_daemon_init("ldapi://%2Ftmp%2Fldapi")) {
+        return 1;
+    }
+    
+    extops_init();
+	lutil_passwd_init();
+
+	if ( slap_init(SLAP_SERVER_MODE,"slapd-fuzz") ) {
+		return 2;
+	}
+
+    if ( read_config( NULL, NULL ) != 0 ) {
+        return 3;
+	}
+    
+    connections_init();
+    slap_startup(NULL);
+    slapd_daemon_nothread();
+    
+    
+    ldap_pvt_thread_initialize();
+    Listener *l = slapd_get_listeners()[0];
+    l->sl_busy = 1;
+    int conn_idx = dup(STDIN_FILENO);
+    int sfd = SLAP_SOCKNEW( conn_idx );
+    assert( sfd < dtblsize );
+    struct berval authid = {0,""};
+    
+    Connection *c = connection_init(sfd,l,"unknown","IP=127.0.0.1:59160",0,0,&authid);
+    #ifdef __AFL_HAVE_MANUAL_CONTROL
+    __AFL_INIT();
+    #endif
+    void* ctx = ldap_pvt_thread_pool_context();
+    connection_read_thread(ctx,(void*)(long)sfd);
+}
+/* 
+ * gdb -ex='set confirm on' -ex 'set args < /fuzzing/input_v3/id:002866,src:001416+002859,time:1015448723,op:MOpt_splice,rep:2' -ex 'set pagination off' -ex 'run' servers/slapd/fuzzing
+ * (cd servers/slapd/; make fuzzing.o; cc -O0 -g -o fuzzing fuzzing.o globals.o bconfig.o config.o daemon.o connection.o search.o filter.o add.o cr.o attr.o entry.o backend.o backends.o result.o operation.o dn.o compare.o modify.o delete.o modrdn.o ch_malloc.o value.o ava.o bind.o unbind.o abandon.o filterentry.o phonetic.o acl.o str2filter.o aclparse.o init.o user.o lock.o controls.o extended.o passwd.o schema.o schema_check.o schema_init.o schema_prep.o schemaparse.o ad.o at.o mr.o syntax.o oc.o saslauthz.o oidm.o starttls.o index.o sets.o referral.o root_dse.o sasl.o module.o mra.o mods.o sl_malloc.o zn_malloc.o limits.o operational.o matchedValues.o cancel.o syncrepl.o backglue.o backover.o ctxcsn.o ldapsync.o frontend.o slapadd.o slapcat.o slapcommon.o slapdn.o slapindex.o slappasswd.o slaptest.o slapauth.o slapacl.o component.o aci.o txn.o slapschema.o slapmodify.o version.o -pthread  libbackends.a liboverlays.a ../../libraries/liblunicode/liblunicode.a ../../libraries/librewrite/librewrite.a ../../libraries/liblutil/liblutil.a ../../libraries/libldap/.libs/libldap.a /openldap/libraries/liblber/.libs/liblber.a ../../libraries/liblber/.libs/liblber.a -luuid -lresolv -pthread)
+ * (cd servers/slapd/; make fuzzing.o; afl-clang-lto -O0 -g -o fuzzing fuzzing.o globals.o bconfig.o config.o daemon.o connection.o search.o filter.o add.o cr.o attr.o entry.o backend.o backends.o result.o operation.o dn.o compare.o modify.o delete.o modrdn.o ch_malloc.o value.o ava.o bind.o unbind.o abandon.o filterentry.o phonetic.o acl.o str2filter.o aclparse.o init.o user.o lock.o controls.o extended.o passwd.o schema.o schema_check.o schema_init.o schema_prep.o schemaparse.o ad.o at.o mr.o syntax.o oc.o saslauthz.o oidm.o starttls.o index.o sets.o referral.o root_dse.o sasl.o module.o mra.o mods.o sl_malloc.o zn_malloc.o limits.o operational.o matchedValues.o cancel.o syncrepl.o backglue.o backover.o ctxcsn.o ldapsync.o frontend.o slapadd.o slapcat.o slapcommon.o slapdn.o slapindex.o slappasswd.o slaptest.o slapauth.o slapacl.o component.o aci.o txn.o slapschema.o slapmodify.o version.o -pthread  libbackends.a liboverlays.a ../../libraries/liblunicode/liblunicode.a ../../libraries/librewrite/librewrite.a ../../libraries/liblutil/liblutil.a ../../libraries/libldap/.libs/libldap.a /openldap/libraries/liblber/.libs/liblber.a ../../libraries/liblber/.libs/liblber.a -luuid -lresolv -pthread)
+ */ 
diff --git a/servers/slapd/fuzzing.h b/servers/slapd/fuzzing.h
index e69de29bb..0c386b474 100644
--- a/servers/slapd/fuzzing.h
+++ b/servers/slapd/fuzzing.h
@@ -0,0 +1,10 @@
+#include "slap.h"
+typedef struct conn_readinfo {
+	Operation *op;
+	ldap_pvt_thread_start_t *func;
+	void *arg;
+	void *ctx;
+	int nullop;
+} conn_readinfo;
+
+int connection_read( ber_socket_t s, conn_readinfo *cri );
diff --git a/servers/slapd/operation.c b/servers/slapd/operation.c
index befda6ef9..eaa55978d 100644
--- a/servers/slapd/operation.c
+++ b/servers/slapd/operation.c
@@ -161,7 +161,9 @@ slap_op_time(time_t *t, int *nop)
 {
 	struct timeval tv;
 	ldap_pvt_thread_mutex_lock( &slap_op_mutex );
-	gettimeofday( &tv, NULL );
+	//gettimeofday( &tv, NULL );
+    tv.tv_sec = 1605535347;
+	tv.tv_usec = 621839;
 	*t = tv.tv_sec;
 	if ( *t == last_time ) {
 		*nop = ++last_incr;
diff --git a/servers/slapd/overlays/retcode.c b/servers/slapd/overlays/retcode.c
index b62698cab..45ce524c2 100644
--- a/servers/slapd/overlays/retcode.c
+++ b/servers/slapd/overlays/retcode.c
@@ -113,12 +113,12 @@ retcode_sleep( int s )
 #if 0	/* use high-order bits for better randomness (Numerical Recipes in "C") */
 		r = rand() % (-s);
 #endif
-		r = ((double)(-s))*rand()/(RAND_MAX + 1.0);
+		r = ((double)(-s))*1/(RAND_MAX + 1.0);
 	} else if ( s > 0 ) {
 		r = (unsigned int)s;
 	}
 	if ( r ) {
-		sleep( r );
+		//sleep( r );
 	}
 
 	return r;
@@ -737,7 +737,7 @@ retcode_db_init( BackendDB *be, ConfigReply *cr )
 	slap_overinst	*on = (slap_overinst *)be->bd_info;
 	retcode_t	*rd;
 
-	srand( getpid() );
+	srand( 0 );
 
 	rd = (retcode_t *)ch_malloc( sizeof( retcode_t ) );
 	memset( rd, 0, sizeof( retcode_t ) );
diff --git a/servers/slapd/proto-slap.h b/servers/slapd/proto-slap.h
index acedf1659..dc6242209 100644
--- a/servers/slapd/proto-slap.h
+++ b/servers/slapd/proto-slap.h
@@ -2094,7 +2094,7 @@ LDAP_SLAPD_V (char *)		slapd_args_file;
 LDAP_SLAPD_V (time_t)		starttime;
 
 /* use time(3) -- no mutex */
-#define slap_get_time()	time( NULL )
+#define slap_get_time()	(1605535347)
 
 LDAP_SLAPD_V (ldap_pvt_thread_pool_t)	connection_pool;
 LDAP_SLAPD_V (int)			connection_pool_max;
diff --git a/servers/slapd/slap.h b/servers/slapd/slap.h
index 6d12f407c..ef4277beb 100644
--- a/servers/slapd/slap.h
+++ b/servers/slapd/slap.h
@@ -134,7 +134,7 @@ LDAP_BEGIN_DECL
 
 #define MAXREMATCHES (100)
 
-#define SLAP_MAX_WORKER_THREADS		(16)
+#define SLAP_MAX_WORKER_THREADS		(2)
 
 #define SLAP_SB_MAX_INCOMING_DEFAULT ((1<<18) - 1)
 #define SLAP_SB_MAX_INCOMING_AUTH ((1<<24) - 1)
diff --git a/servers/slapd/syslog.c b/servers/slapd/syslog.c
index 47ea1c6d9..922700129 100644
--- a/servers/slapd/syslog.c
+++ b/servers/slapd/syslog.c
@@ -146,7 +146,7 @@ syslog(int pri, const char *fmt, ...)
 			connectlog();
 		}
 		do {
-			usleep(1);
+			//usleep(1);
 			if ((error = send(LogFile, tbuf, cnt, 0)) >= 0)
 				break;
 		} while (errno == ENOBUFS);
